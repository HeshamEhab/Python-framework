{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Insya Python Framework Insya Python framework is designed to help developers build scalable, modular, and maintainable systems. It organizes your project into structured components, making it easier to manage and extend. Whether you're developing small apps or complex enterprise systems, our framework provides all the essential tools and libraries to streamline your development process. Key Features of the Framework Modular Architecture : The framework is divided into distinct modules and areas, each responsible for specific functionality, allowing you to build and manage your system with ease. Separation of Concerns : With dedicated folders for applications, widgets, languages, and core libraries, the framework promotes clean code and a clear project structure. Flexible and Scalable : Whether you're working on a small app or a large system, this framework supports flexibility and scalability to grow with your project. Easy Integration : The system is designed to integrate seamlessly with browser-based resources and other components, ensuring smooth communication between apps and services. Framework Structure The system is organized into the following primary folders: ins_apps : Contains the system's applications. ins_wdgts : Includes reusable widgets that enhance UI and functionality. ins_languages : Houses language-specific files for localization and internationalization (e.g., ar , en , fr ). ins_kits : The core engine of the system, containing essential libraries and tools. ins_web : Manages browser-related files like JS and CSS. Areas of the Framework The framework is also divided into areas , which are subsystems within the larger system. Each area follows the same modular structure and operates independently. For example: ins_admin : A dedicated area for administrative functionalities. Our framework ensures that all parts of your project are well-organized, easy to navigate, and ready for future expansion.","title":"Home"},{"location":"#welcome-to-insya-python-framework","text":"Insya Python framework is designed to help developers build scalable, modular, and maintainable systems. It organizes your project into structured components, making it easier to manage and extend. Whether you're developing small apps or complex enterprise systems, our framework provides all the essential tools and libraries to streamline your development process.","title":"Welcome to Insya Python Framework"},{"location":"#key-features-of-the-framework","text":"Modular Architecture : The framework is divided into distinct modules and areas, each responsible for specific functionality, allowing you to build and manage your system with ease. Separation of Concerns : With dedicated folders for applications, widgets, languages, and core libraries, the framework promotes clean code and a clear project structure. Flexible and Scalable : Whether you're working on a small app or a large system, this framework supports flexibility and scalability to grow with your project. Easy Integration : The system is designed to integrate seamlessly with browser-based resources and other components, ensuring smooth communication between apps and services.","title":"Key Features of the Framework"},{"location":"#framework-structure","text":"The system is organized into the following primary folders: ins_apps : Contains the system's applications. ins_wdgts : Includes reusable widgets that enhance UI and functionality. ins_languages : Houses language-specific files for localization and internationalization (e.g., ar , en , fr ). ins_kits : The core engine of the system, containing essential libraries and tools. ins_web : Manages browser-related files like JS and CSS.","title":"Framework Structure"},{"location":"#areas-of-the-framework","text":"The framework is also divided into areas , which are subsystems within the larger system. Each area follows the same modular structure and operates independently. For example: ins_admin : A dedicated area for administrative functionalities. Our framework ensures that all parts of your project are well-organized, easy to navigate, and ready for future expansion.","title":"Areas of the Framework"},{"location":"app/","text":"Creating an App in the System An App is a part of the system that can be used and called from any area. Below are the steps to create an app in the system. Steps to Create an App 1. Create the App Folder First, create a folder inside the ins_apps directory. The folder name should represent your app and be written with prefex app . Ex : app_test 2. Create the Python File Inside the app folder, create a Python file with the same name as the folder, followed by the .py extension. This file is the minimum requirement to create an app, and it will be enough for the app to work. The class name in the Python file should be the same as the folder and file name, written in CamelCase (without underscores) in previpus example if app name is app_test the class name should be AppTest . This Python file will initialize the app and make it functional. 3. Additional Files (Optional) You can enhance your app by adding more files: Additional Python Files : If needed, you can create more Python files for additional functionality. Properties File : A JSON file called properties.json can be created an you can know more about json properties file from here . JavaScript and CSS Files : If your app needs JavaScript or CSS, you will need to create a new folder inside the ins_web directory with the same name as your app. Inside this folder, you can create: script.js for JavaScript code. style.css for custom styles. 4. Make Your App Viewable in the Portal To make your app accessible and viewable in the portal, you need to follow the instructions provided in this link . This simple structure is all you need to create an app in the system. You can always add more files as required for additional functionality.","title":"App"},{"location":"app/#creating-an-app-in-the-system","text":"An App is a part of the system that can be used and called from any area. Below are the steps to create an app in the system.","title":"Creating an App in the System"},{"location":"app/#steps-to-create-an-app","text":"","title":"Steps to Create an App"},{"location":"app/#1-create-the-app-folder","text":"First, create a folder inside the ins_apps directory. The folder name should represent your app and be written with prefex app . Ex : app_test","title":"1. Create the App Folder"},{"location":"app/#2-create-the-python-file","text":"Inside the app folder, create a Python file with the same name as the folder, followed by the .py extension. This file is the minimum requirement to create an app, and it will be enough for the app to work. The class name in the Python file should be the same as the folder and file name, written in CamelCase (without underscores) in previpus example if app name is app_test the class name should be AppTest . This Python file will initialize the app and make it functional.","title":"2. Create the Python File"},{"location":"app/#3-additional-files-optional","text":"You can enhance your app by adding more files: Additional Python Files : If needed, you can create more Python files for additional functionality. Properties File : A JSON file called properties.json can be created an you can know more about json properties file from here . JavaScript and CSS Files : If your app needs JavaScript or CSS, you will need to create a new folder inside the ins_web directory with the same name as your app. Inside this folder, you can create: script.js for JavaScript code. style.css for custom styles.","title":"3. Additional Files (Optional)"},{"location":"app/#4-make-your-app-viewable-in-the-portal","text":"To make your app accessible and viewable in the portal, you need to follow the instructions provided in this link . This simple structure is all you need to create an app in the system. You can always add more files as required for additional functionality.","title":"4. Make Your App Viewable in the Portal"},{"location":"area/","text":"Creating and Configuring an Area What is an Area? An area is like a mini-website inside the framework. It has its own structure and components, including apps, widgets, and web files. Think of it as a separate section of your system that can function independently, while still being part of the larger framework. For example, if your framework is a big house, each area is like a room with its own purpose and design. You can create as many areas as you need, and each can include folders like ins_apps , ins_wdgts , ins_web , and other necessary files to operate as its own mini-website. How to Create a New Area Step 1: Create the Area Folder Navigate to the root directory ( home ). Create a new folder for your area with the prefix ins . Example: For an example area, name it ins_ex (where ex stands for example). Step 2: Create an index.py File Inside the newly created area folder, create an index.py file. Add the following code to the index.py file: from flask import Flask, g, Blueprint, abort, render_template from ins_kit.ins import ins area = \"ins_ex\" # Replace with your area name tmp = f\"../{area}/{ins._map.WEB_FOLDER}/{ins._map.TEMPLATES_FOLDER}\" static = f\"../{area}/{ins._map.WEB_FOLDER}\" ins_ex_bp = Blueprint(area, __name__, template_folder=tmp, static_folder=static) @ins_ex_bp.route('/', defaults={'path': ''}, methods=['GET', 'POST']) @ins_ex_bp.route('/<path:path>', methods=['GET', 'POST']) def admin(path): return ins._tmp._render(area, path) Notes: If the area needs to be secured (e.g., an admin panel), replace the last return statement with: python return ins._tmp._login(area, path) If the area should be publicly accessible (e.g., a homepage), keep: python return ins._tmp._render(area, path) Step 3: Add the Area to app.json Open the file located at /ins_pros/app.json . Under the \"areas\" tag, add an entry for your area: \"ins_ex\": { \"url\": \"ins_ex\", \"name\": \"ins_ex\", \"title\": \"Ex Area\", \"logo\": \"ex.png\" } Key Points: Key and Name and URL: Should match exactly; these identify the area in the system. Title: Displayed as the area's title in the UI. Logo: Path to the logo file for the area. Step 4: Register the Area in the Main File Open the main file that starts the system. Add the following in the include section: python from ins_ex.index import ins_ex_bp Before the app.run method, register the area with a URL prefix: python app.register_blueprint(ins_ex_bp, url_prefix=f\"/ins_ex\") The code after adding this two lines should be like this from flask import Flask, request from ins_kit.ins import ins from index import ahome from ins_admin.index import ins_admin_bp from ins_ex.index import ins_ex_bp ##import new area from ajax import ajax_bp app = Flask(__name__) app.secret_key = 'ins12345' app.config['SESSION_TYPE'] = 'filesystem' @app.before_request def before_request(): ins._eng._int(request.path) app.register_blueprint(ahome, url_prefix=f\"/\") app.register_blueprint(ins_admin_bp, url_prefix=f\"/ins_admin\") app.register_blueprint(ins_ex_bp, url_prefix=f\"/ins_ex\") ##register new area app.register_blueprint(ajax_bp, url_prefix=f\"/ins_ajax\") if __name__ == '__main__': app.run(debug=True) Step 5: Define a UI Template Access the admin panel: Navigate to Settings -> Database . Open the kit_template table. If you haven\u2019t created a specific template for your new area, you can duplicate an existing one. Example: Duplicate the ins_admin template row. Replace the tar_area field value with the new area name ( ins_ex ). Ensure the kit_default field value is set to 1 . Step 6: Create an App for the Area Inside the area folder, create a subfolder for apps named ins_apps . Follow the App Creation Guide to create an app within this folder. Step 7: Add a Menu Item Refer to the Menu Item Creation Guide to link the app to the area\u2019s menu. Accessing the Area Enter your area\u2019s name in the URL: Example: https://insya.ins_ex.com If the area is secured ( ins._tmp._login ), you must log in to access it. Notes: Folder Structure: Ensure all necessary folders (e.g., ins_apps , ins_web ) exist within the area, even if not initially used. Flexibility: Areas can be structured to include any required part of the framework.","title":"Area"},{"location":"area/#creating-and-configuring-an-area","text":"","title":"Creating and Configuring an Area"},{"location":"area/#what-is-an-area","text":"An area is like a mini-website inside the framework. It has its own structure and components, including apps, widgets, and web files. Think of it as a separate section of your system that can function independently, while still being part of the larger framework. For example, if your framework is a big house, each area is like a room with its own purpose and design. You can create as many areas as you need, and each can include folders like ins_apps , ins_wdgts , ins_web , and other necessary files to operate as its own mini-website.","title":"What is an Area?"},{"location":"area/#how-to-create-a-new-area","text":"","title":"How to Create a New Area"},{"location":"area/#step-1-create-the-area-folder","text":"Navigate to the root directory ( home ). Create a new folder for your area with the prefix ins . Example: For an example area, name it ins_ex (where ex stands for example).","title":"Step 1: Create the Area Folder"},{"location":"area/#step-2-create-an-indexpy-file","text":"Inside the newly created area folder, create an index.py file. Add the following code to the index.py file: from flask import Flask, g, Blueprint, abort, render_template from ins_kit.ins import ins area = \"ins_ex\" # Replace with your area name tmp = f\"../{area}/{ins._map.WEB_FOLDER}/{ins._map.TEMPLATES_FOLDER}\" static = f\"../{area}/{ins._map.WEB_FOLDER}\" ins_ex_bp = Blueprint(area, __name__, template_folder=tmp, static_folder=static) @ins_ex_bp.route('/', defaults={'path': ''}, methods=['GET', 'POST']) @ins_ex_bp.route('/<path:path>', methods=['GET', 'POST']) def admin(path): return ins._tmp._render(area, path)","title":"Step 2: Create an index.py File"},{"location":"area/#notes","text":"If the area needs to be secured (e.g., an admin panel), replace the last return statement with: python return ins._tmp._login(area, path) If the area should be publicly accessible (e.g., a homepage), keep: python return ins._tmp._render(area, path)","title":"Notes:"},{"location":"area/#step-3-add-the-area-to-appjson","text":"Open the file located at /ins_pros/app.json . Under the \"areas\" tag, add an entry for your area: \"ins_ex\": { \"url\": \"ins_ex\", \"name\": \"ins_ex\", \"title\": \"Ex Area\", \"logo\": \"ex.png\" }","title":"Step 3: Add the Area to app.json"},{"location":"area/#key-points","text":"Key and Name and URL: Should match exactly; these identify the area in the system. Title: Displayed as the area's title in the UI. Logo: Path to the logo file for the area.","title":"Key Points:"},{"location":"area/#step-4-register-the-area-in-the-main-file","text":"Open the main file that starts the system. Add the following in the include section: python from ins_ex.index import ins_ex_bp Before the app.run method, register the area with a URL prefix: python app.register_blueprint(ins_ex_bp, url_prefix=f\"/ins_ex\") The code after adding this two lines should be like this from flask import Flask, request from ins_kit.ins import ins from index import ahome from ins_admin.index import ins_admin_bp from ins_ex.index import ins_ex_bp ##import new area from ajax import ajax_bp app = Flask(__name__) app.secret_key = 'ins12345' app.config['SESSION_TYPE'] = 'filesystem' @app.before_request def before_request(): ins._eng._int(request.path) app.register_blueprint(ahome, url_prefix=f\"/\") app.register_blueprint(ins_admin_bp, url_prefix=f\"/ins_admin\") app.register_blueprint(ins_ex_bp, url_prefix=f\"/ins_ex\") ##register new area app.register_blueprint(ajax_bp, url_prefix=f\"/ins_ajax\") if __name__ == '__main__': app.run(debug=True)","title":"Step 4: Register the Area in the Main File"},{"location":"area/#step-5-define-a-ui-template","text":"Access the admin panel: Navigate to Settings -> Database . Open the kit_template table. If you haven\u2019t created a specific template for your new area, you can duplicate an existing one. Example: Duplicate the ins_admin template row. Replace the tar_area field value with the new area name ( ins_ex ). Ensure the kit_default field value is set to 1 .","title":"Step 5: Define a UI Template"},{"location":"area/#step-6-create-an-app-for-the-area","text":"Inside the area folder, create a subfolder for apps named ins_apps . Follow the App Creation Guide to create an app within this folder.","title":"Step 6: Create an App for the Area"},{"location":"area/#step-7-add-a-menu-item","text":"Refer to the Menu Item Creation Guide to link the app to the area\u2019s menu.","title":"Step 7: Add a Menu Item"},{"location":"area/#accessing-the-area","text":"Enter your area\u2019s name in the URL: Example: https://insya.ins_ex.com If the area is secured ( ins._tmp._login ), you must log in to access it.","title":"Accessing the Area"},{"location":"area/#notes_1","text":"Folder Structure: Ensure all necessary folders (e.g., ins_apps , ins_web ) exist within the area, even if not initially used. Flexibility: Areas can be structured to include any required part of the framework.","title":"Notes:"},{"location":"crud/","text":"What is a CRUD System? A CRUD system allows you to manage data in your app with four basic functions: - Create : Add new records. - Read : View existing records. - Update : Edit records. - Delete : Remove records. Why Use CRUD? It makes database tasks easy by creating a user-friendly interface for these functions. With CRUD, you can: - Show a list of data. - Add new items. - Edit or delete items. - Filter data to find what you need. How to Enable CRUD Step 1: Add the Code To enable CRUD in your app, add this line to the out method of your Python file: return self.ins._apps._crud(properties=self.app._properties) Step 2: Connect to properties.json This code links your app to a file called properties.json . This file controls how your data is displayed, edited, and filtered. What Happens Next? Your app will now have: - A list of items. - Buttons to add, edit, or delete items. - Filters to search and sort items. Customizing CRUD with properties.json What is properties.json ? This file lets you customize how your CRUD system works. You can decide: - What data to show in the list. - What fields to include in forms. - How to filter the data. Key Parts of properties.json 1. Choose a Table Tell the CRUD system which database table to use: \"table\": \"kit_menu\" 2. Customize the List View Decide which fields to show in the list: \"list_data\": [ { \"name\": \"title\", \"title\": \"Title\", \"view\": \"text\", \"class\": \"ins-col-grow\" }, { \"name\": \"status\", \"title\": \"Status\", \"view\": \"text\", \"class\": \"ins-col-2\" } ] name : The database field name. title : The label to display. view : How the field looks (e.g., text). class : CSS styling for layout. 3. Create a Form Define the fields for adding or editing items: \"form_data\": [ { \"name\": \"title\", \"title\": \"Title *\", \"_type\": \"input\", \"type\": \"text\", \"required\": true, \"pclass\": \"ins-col-6\" } ] _type : The input type (e.g., text box). required : Makes the field mandatory. 4. Add Filters Set up filters to search or sort data: \"list_filter\": [ { \"name\": \"title\", \"title\": \"Search Title\", \"_type\": \"input\", \"type\": \"text\", \"_info\": \"Search in <b>Title</b> by <b>@(value)</b>\", \"main\": true, \"pclass\": \"ins-col-12\" } ] _info : Custom search information text. main : By enabling this field, the filter will appear on the main page (at the top of the list page). Dynamic CRUD Setup in Python Skip the JSON File If you don\u2019t want to use properties.json , you can define CRUD options directly in Python. Example: ops = self.ins._apps._crud_ops # List fields ops._list_data = [ {\"name\": \"title\", \"title\": \"Title\", \"view\": \"text\", \"class\": \"ins-col-9\"} ] # Form fields ops._form_data = [ {\"name\": \"title\", \"title\": \"Title\", \"_type\": \"input\", \"type\": \"text\"} ] # Filters ops._list_filter = [ {\"name\": \"title\", \"title\": \"Search Title\", \"_type\": \"input\", \"type\": \"text\"} ] # Table name ops._table = \"kit_menu\" # Return CRUD system return self.ins._apps._crud(ops) Why Use properties.json ? Using properties.json makes it easy to: - Update settings without changing code. - Test changes instantly by saving the file. - Work with team members without editing the app\u2019s core logic. This version is designed for beginners with straightforward explanations, examples, and fewer technical details. Let me know if you need further refinements!","title":"CRUD"},{"location":"crud/#what-is-a-crud-system","text":"A CRUD system allows you to manage data in your app with four basic functions: - Create : Add new records. - Read : View existing records. - Update : Edit records. - Delete : Remove records.","title":"What is a CRUD System?"},{"location":"crud/#why-use-crud","text":"It makes database tasks easy by creating a user-friendly interface for these functions. With CRUD, you can: - Show a list of data. - Add new items. - Edit or delete items. - Filter data to find what you need.","title":"Why Use CRUD?"},{"location":"crud/#how-to-enable-crud","text":"","title":"How to Enable CRUD"},{"location":"crud/#step-1-add-the-code","text":"To enable CRUD in your app, add this line to the out method of your Python file: return self.ins._apps._crud(properties=self.app._properties)","title":"Step 1: Add the Code"},{"location":"crud/#step-2-connect-to-propertiesjson","text":"This code links your app to a file called properties.json . This file controls how your data is displayed, edited, and filtered.","title":"Step 2: Connect to properties.json"},{"location":"crud/#what-happens-next","text":"Your app will now have: - A list of items. - Buttons to add, edit, or delete items. - Filters to search and sort items.","title":"What Happens Next?"},{"location":"crud/#customizing-crud-with-propertiesjson","text":"","title":"Customizing CRUD with properties.json"},{"location":"crud/#what-is-propertiesjson","text":"This file lets you customize how your CRUD system works. You can decide: - What data to show in the list. - What fields to include in forms. - How to filter the data.","title":"What is properties.json?"},{"location":"crud/#key-parts-of-propertiesjson","text":"","title":"Key Parts of properties.json"},{"location":"crud/#1-choose-a-table","text":"Tell the CRUD system which database table to use: \"table\": \"kit_menu\"","title":"1. Choose a Table"},{"location":"crud/#2-customize-the-list-view","text":"Decide which fields to show in the list: \"list_data\": [ { \"name\": \"title\", \"title\": \"Title\", \"view\": \"text\", \"class\": \"ins-col-grow\" }, { \"name\": \"status\", \"title\": \"Status\", \"view\": \"text\", \"class\": \"ins-col-2\" } ] name : The database field name. title : The label to display. view : How the field looks (e.g., text). class : CSS styling for layout.","title":"2. Customize the List View"},{"location":"crud/#3-create-a-form","text":"Define the fields for adding or editing items: \"form_data\": [ { \"name\": \"title\", \"title\": \"Title *\", \"_type\": \"input\", \"type\": \"text\", \"required\": true, \"pclass\": \"ins-col-6\" } ] _type : The input type (e.g., text box). required : Makes the field mandatory.","title":"3. Create a Form"},{"location":"crud/#4-add-filters","text":"Set up filters to search or sort data: \"list_filter\": [ { \"name\": \"title\", \"title\": \"Search Title\", \"_type\": \"input\", \"type\": \"text\", \"_info\": \"Search in <b>Title</b> by <b>@(value)</b>\", \"main\": true, \"pclass\": \"ins-col-12\" } ] _info : Custom search information text. main : By enabling this field, the filter will appear on the main page (at the top of the list page).","title":"4. Add Filters"},{"location":"crud/#dynamic-crud-setup-in-python","text":"","title":"Dynamic CRUD Setup in Python"},{"location":"crud/#skip-the-json-file","text":"If you don\u2019t want to use properties.json , you can define CRUD options directly in Python.","title":"Skip the JSON File"},{"location":"crud/#example","text":"ops = self.ins._apps._crud_ops # List fields ops._list_data = [ {\"name\": \"title\", \"title\": \"Title\", \"view\": \"text\", \"class\": \"ins-col-9\"} ] # Form fields ops._form_data = [ {\"name\": \"title\", \"title\": \"Title\", \"_type\": \"input\", \"type\": \"text\"} ] # Filters ops._list_filter = [ {\"name\": \"title\", \"title\": \"Search Title\", \"_type\": \"input\", \"type\": \"text\"} ] # Table name ops._table = \"kit_menu\" # Return CRUD system return self.ins._apps._crud(ops)","title":"Example:"},{"location":"crud/#why-use-propertiesjson","text":"Using properties.json makes it easy to: - Update settings without changing code. - Test changes instantly by saving the file. - Work with team members without editing the app\u2019s core logic. This version is designed for beginners with straightforward explanations, examples, and fewer technical details. Let me know if you need further refinements!","title":"Why Use properties.json?"},{"location":"db/","text":"Database Management from Admin Panel You can manage all database operations from the admin panel . From the admin side panel , click on Settings and then click on Database . You can: Insert tables or rows Edit table structures or individual rows View table data Remove tables or rows 1. Managing Tables How to Add a New Table Click on the (+ Add Table) button. The SQL area will be filled with the following default SQL structure: CREATE TABLE `$table_name` ( `id` int(11) NOT NULL, `title` varchar(255) NOT NULL, `des` text DEFAULT NULL, `kit_deleted` tinyint(4) NOT NULL DEFAULT 0, `kit_disabled` tinyint(4) NOT NULL DEFAULT 0, `kit_modified` datetime NOT NULL, `kit_created` datetime NOT NULL ) ENGINE=MyISAM DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci; ALTER TABLE `$table_name` ADD PRIMARY KEY (`id`); ALTER TABLE `$table_name` MODIFY `id` int(11) NOT NULL AUTO_INCREMENT; COMMIT; Replace the variable $table_name with your table name. Be careful! You need to replace it in three places . Auto-generated fields like these must always be included in your table: id kit_deleted kit_disabled kit_modified kit_created Other fields can be edited or removed based on your requirements. You can learn more about MySQL database field types here . After completing your SQL, click on the (Run) button to create the table. The newly created table will appear at the top of the table list . How to Update Table Structure To update a table structure, click on the in the table row. This will take you to a page displaying all fields and their types as rows. You can: Edit existing fields. Add a new field by clicking on the (+ Add Field) button. When adding a new field: The SQL area will automatically be filled with SQL for adding a field. Replace the variable $column_name with your field name. Change the field type if necessary (default is varchar(255) ). Example SQL: sql ALTER TABLE `your_table_name` ADD `$column_name` varchar(255); Click on the (Run) button, and the new field will appear in the field list. 2. Managing Table Data To access the data inside a table: Click on the in the table row. This will lead you to the data view for that table. Each row represents a record in the table. You can: Add a New Row Click on the (+ Insert) button. The SQL area will be filled with SQL for inserting a row: sql INSERT INTO `your_table_name` (`field1`, `field2`, ...) VALUES ('$field1_val', '$field2_val', ...); Replace the variables with the values you want to insert: id is auto-incremented . kit_deleted and kit_disabled are 0 by default . kit_created and kit_modified default to the current date and time . Example: sql INSERT INTO `my_table` (`title`, `des`) VALUES ('My Title', 'Some Description'); Click on the (Run) button to add the record. Update or Delete a Row Edit : Click on the next to the record. The SQL area will be filled with an UPDATE statement: sql UPDATE `your_table_name` SET `field_name` = 'new_value' WHERE `id` = record_id; Delete : Click on the to delete the record. 3. Table Actions In the table list, you will find additional actions: Empty Table : Click on the to clear all data in the table without removing its structure. Delete Table : Click on the to remove the table completely. Summary With the admin panel's database tools, you can easily: Create tables and define their structure. Add, edit, or delete fields. Insert, update, or delete records. Manage tables without writing complex SQL manually. These features ensure efficient management of your application's database while minimizing the risk of errors.","title":"Database"},{"location":"db/#database-management-from-admin-panel","text":"You can manage all database operations from the admin panel . From the admin side panel , click on Settings and then click on Database . You can: Insert tables or rows Edit table structures or individual rows View table data Remove tables or rows","title":"Database Management from Admin Panel"},{"location":"db/#1-managing-tables","text":"","title":"1. Managing Tables"},{"location":"db/#how-to-add-a-new-table","text":"Click on the (+ Add Table) button. The SQL area will be filled with the following default SQL structure: CREATE TABLE `$table_name` ( `id` int(11) NOT NULL, `title` varchar(255) NOT NULL, `des` text DEFAULT NULL, `kit_deleted` tinyint(4) NOT NULL DEFAULT 0, `kit_disabled` tinyint(4) NOT NULL DEFAULT 0, `kit_modified` datetime NOT NULL, `kit_created` datetime NOT NULL ) ENGINE=MyISAM DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci; ALTER TABLE `$table_name` ADD PRIMARY KEY (`id`); ALTER TABLE `$table_name` MODIFY `id` int(11) NOT NULL AUTO_INCREMENT; COMMIT; Replace the variable $table_name with your table name. Be careful! You need to replace it in three places . Auto-generated fields like these must always be included in your table: id kit_deleted kit_disabled kit_modified kit_created Other fields can be edited or removed based on your requirements. You can learn more about MySQL database field types here . After completing your SQL, click on the (Run) button to create the table. The newly created table will appear at the top of the table list .","title":"How to Add a New Table"},{"location":"db/#how-to-update-table-structure","text":"To update a table structure, click on the in the table row. This will take you to a page displaying all fields and their types as rows. You can: Edit existing fields. Add a new field by clicking on the (+ Add Field) button. When adding a new field: The SQL area will automatically be filled with SQL for adding a field. Replace the variable $column_name with your field name. Change the field type if necessary (default is varchar(255) ). Example SQL: sql ALTER TABLE `your_table_name` ADD `$column_name` varchar(255); Click on the (Run) button, and the new field will appear in the field list.","title":"How to Update Table Structure"},{"location":"db/#2-managing-table-data","text":"To access the data inside a table: Click on the in the table row. This will lead you to the data view for that table. Each row represents a record in the table. You can:","title":"2. Managing Table Data"},{"location":"db/#add-a-new-row","text":"Click on the (+ Insert) button. The SQL area will be filled with SQL for inserting a row: sql INSERT INTO `your_table_name` (`field1`, `field2`, ...) VALUES ('$field1_val', '$field2_val', ...); Replace the variables with the values you want to insert: id is auto-incremented . kit_deleted and kit_disabled are 0 by default . kit_created and kit_modified default to the current date and time . Example: sql INSERT INTO `my_table` (`title`, `des`) VALUES ('My Title', 'Some Description'); Click on the (Run) button to add the record.","title":"Add a New Row"},{"location":"db/#update-or-delete-a-row","text":"Edit : Click on the next to the record. The SQL area will be filled with an UPDATE statement: sql UPDATE `your_table_name` SET `field_name` = 'new_value' WHERE `id` = record_id; Delete : Click on the to delete the record.","title":"Update or Delete a Row"},{"location":"db/#3-table-actions","text":"In the table list, you will find additional actions: Empty Table : Click on the to clear all data in the table without removing its structure. Delete Table : Click on the to remove the table completely.","title":"3. Table Actions"},{"location":"db/#summary","text":"With the admin panel's database tools, you can easily: Create tables and define their structure. Add, edit, or delete fields. Insert, update, or delete records. Manage tables without writing complex SQL manually. These features ensure efficient management of your application's database while minimizing the risk of errors.","title":"Summary"},{"location":"js/","text":"JavaScript in Our Framework Why Use JavaScript? JavaScript is a powerful and versatile programming language that allows you to add interactivity and dynamic functionality to your web applications. By using JavaScript in our framework, you can: Respond to user actions in real-time (e.g., clicks, form submissions, or input changes). Dynamically update content without reloading the page. Communicate with the server to fetch or send data using AJAX. Enhance the overall user experience with smooth animations and interactive elements. Including JavaScript Files in Your Python File To integrate JavaScript into your app, the JavaScript file should be stored in a specific directory structure relative to your Python file. Directory Structure: If your Python file is located in: ins_apps -> app_blog Then the JavaScript file should be located in: ins_web -> ins_apps -> app_blog Including the JavaScript File: To include your JavaScript file in the application, add the following line inside the out method of your Python file: self.app._include(\"script.js\") Using JavaScript in the Framework Selectors To interact with elements in your HTML, use the ins selector: ins(\"select.src_area\") Explanation : The selector inside the parentheses is a standard CSS selector. For example: select.src_area refers to a <select> element with the class src_area . Use . for classes and # for IDs as in standard CSS selectors. Events Events define when an action should occur. You can attach an event to your selector using the ._on method. For example: ._on(\"change\") Here is a list of commonly used events: - change : Triggered when a form element\u2019s value changes. - click : Triggered when the element is clicked. - mouseover : Triggered when the mouse hovers over the element. - mouseout : Triggered when the mouse leaves the element. - keyup : Triggered when a key is released. - keydown : Triggered when a key is pressed. - scroll : Triggered when the user scrolls. - submit : Triggered when a form is submitted. You can find more events here . Actions Actions define what happens when the event occurs. For example: function(o){ console.log(\"My code works\"); } Complete Example Here\u2019s how to combine the selector, event, and action into a functional piece of code: ins(\"select.src_area\")._on(\"change\", function(o){ console.log(\"My code works\"); }, true); Notes: The o variable represents the object where the event occurred. If the class is used in multiple objects, o allows you to target the specific object that triggered the event. Passing Data with Attributes To pass data from an HTML element to JavaScript, use the data-* attributes. For example: HTML: <select class=\"src_area\" data-id=\"123\"></select> JavaScript: o._getData(\"id\"); This retrieves the value of the data-id attribute (e.g., 123 ). AJAX What is AJAX? AJAX (Asynchronous JavaScript and XML) allows you to communicate with the server without reloading the page. It is essential for creating dynamic and responsive web applications. Why Use AJAX? Fetch or send data to the server without refreshing the page. Improve user experience with faster interactions. Enable real-time updates in your app. Using AJAX in Our Framework Define the Method First, call the desired method from the Python file. For example: ins(\"_get_js_data\") Specify the Library Define the type of AJAX operation based on the part of the application you\u2019re working on. For example: ._ajax._app Replace app with the relevant section, such as wdgt for widgets. Pass Data Prepare the data to send to the server. For example: {\"id\": o._getData(\"id\")} This sends the id value retrieved from the object using the o._getData method. Handle the Response Specify the actions to perform after the server responds. For example: function(data){ console.log(\"Operation done\"); } Complete AJAX Example Here\u2019s how to put it all together: ins(\"_get_js_data\")._ajax._app({\"id\": o._getData(\"id\")}, function(data){ console.log(\"Operation done\"); }); Explanation: Selector : ins(\"_get_js_data\") specifies the method to call. Data : { \"id\": o._getData(\"id\") } sends the id to the server. Callback : function(data) handles the server\u2019s response. Notes: The data parameter in the callback contains the server\u2019s response. Use this response to update the UI, show notifications, or take other actions.","title":"JS"},{"location":"js/#javascript-in-our-framework","text":"","title":"JavaScript in Our Framework"},{"location":"js/#why-use-javascript","text":"JavaScript is a powerful and versatile programming language that allows you to add interactivity and dynamic functionality to your web applications. By using JavaScript in our framework, you can: Respond to user actions in real-time (e.g., clicks, form submissions, or input changes). Dynamically update content without reloading the page. Communicate with the server to fetch or send data using AJAX. Enhance the overall user experience with smooth animations and interactive elements.","title":"Why Use JavaScript?"},{"location":"js/#including-javascript-files-in-your-python-file","text":"To integrate JavaScript into your app, the JavaScript file should be stored in a specific directory structure relative to your Python file.","title":"Including JavaScript Files in Your Python File"},{"location":"js/#directory-structure","text":"If your Python file is located in: ins_apps -> app_blog Then the JavaScript file should be located in: ins_web -> ins_apps -> app_blog","title":"Directory Structure:"},{"location":"js/#including-the-javascript-file","text":"To include your JavaScript file in the application, add the following line inside the out method of your Python file: self.app._include(\"script.js\")","title":"Including the JavaScript File:"},{"location":"js/#using-javascript-in-the-framework","text":"","title":"Using JavaScript in the Framework"},{"location":"js/#selectors","text":"To interact with elements in your HTML, use the ins selector: ins(\"select.src_area\") Explanation : The selector inside the parentheses is a standard CSS selector. For example: select.src_area refers to a <select> element with the class src_area . Use . for classes and # for IDs as in standard CSS selectors.","title":"Selectors"},{"location":"js/#events","text":"Events define when an action should occur. You can attach an event to your selector using the ._on method. For example: ._on(\"change\") Here is a list of commonly used events: - change : Triggered when a form element\u2019s value changes. - click : Triggered when the element is clicked. - mouseover : Triggered when the mouse hovers over the element. - mouseout : Triggered when the mouse leaves the element. - keyup : Triggered when a key is released. - keydown : Triggered when a key is pressed. - scroll : Triggered when the user scrolls. - submit : Triggered when a form is submitted. You can find more events here .","title":"Events"},{"location":"js/#actions","text":"Actions define what happens when the event occurs. For example: function(o){ console.log(\"My code works\"); }","title":"Actions"},{"location":"js/#complete-example","text":"Here\u2019s how to combine the selector, event, and action into a functional piece of code: ins(\"select.src_area\")._on(\"change\", function(o){ console.log(\"My code works\"); }, true);","title":"Complete Example"},{"location":"js/#notes","text":"The o variable represents the object where the event occurred. If the class is used in multiple objects, o allows you to target the specific object that triggered the event.","title":"Notes:"},{"location":"js/#passing-data-with-attributes","text":"To pass data from an HTML element to JavaScript, use the data-* attributes. For example:","title":"Passing Data with Attributes"},{"location":"js/#html","text":"<select class=\"src_area\" data-id=\"123\"></select>","title":"HTML:"},{"location":"js/#javascript","text":"o._getData(\"id\"); This retrieves the value of the data-id attribute (e.g., 123 ).","title":"JavaScript:"},{"location":"js/#ajax","text":"","title":"AJAX"},{"location":"js/#what-is-ajax","text":"AJAX (Asynchronous JavaScript and XML) allows you to communicate with the server without reloading the page. It is essential for creating dynamic and responsive web applications.","title":"What is AJAX?"},{"location":"js/#why-use-ajax","text":"Fetch or send data to the server without refreshing the page. Improve user experience with faster interactions. Enable real-time updates in your app.","title":"Why Use AJAX?"},{"location":"js/#using-ajax-in-our-framework","text":"","title":"Using AJAX in Our Framework"},{"location":"js/#define-the-method","text":"First, call the desired method from the Python file. For example: ins(\"_get_js_data\")","title":"Define the Method"},{"location":"js/#specify-the-library","text":"Define the type of AJAX operation based on the part of the application you\u2019re working on. For example: ._ajax._app Replace app with the relevant section, such as wdgt for widgets.","title":"Specify the Library"},{"location":"js/#pass-data","text":"Prepare the data to send to the server. For example: {\"id\": o._getData(\"id\")} This sends the id value retrieved from the object using the o._getData method.","title":"Pass Data"},{"location":"js/#handle-the-response","text":"Specify the actions to perform after the server responds. For example: function(data){ console.log(\"Operation done\"); }","title":"Handle the Response"},{"location":"js/#complete-ajax-example","text":"Here\u2019s how to put it all together: ins(\"_get_js_data\")._ajax._app({\"id\": o._getData(\"id\")}, function(data){ console.log(\"Operation done\"); });","title":"Complete AJAX Example"},{"location":"js/#explanation","text":"Selector : ins(\"_get_js_data\") specifies the method to call. Data : { \"id\": o._getData(\"id\") } sends the id to the server. Callback : function(data) handles the server\u2019s response.","title":"Explanation:"},{"location":"js/#notes_1","text":"The data parameter in the callback contains the server\u2019s response. Use this response to update the UI, show notifications, or take other actions.","title":"Notes:"},{"location":"menu_item/","text":"How to Create a Menu for Your App Follow these steps to make your newly created app accessible by adding a menu item in the system: Step 1: Access the Admin Panel Go to the Admin Panel from the side panel. Click on Settings . Select Menu Item from the options. Step 2: Open the Menu Items List You will land on a page that displays a list of all system menu items. To add a new menu item, click on the Add button. Step 3: Fill Out the Form You will see a form with the following fields: 1. Menu/App Title Enter the title of the menu/app you want visible to users. 2. Alias This is the URL for the app. Follow these rules: Use lowercase letters. Replace spaces with underscores ( _ ). 3. Source Section This section determines which area the app belongs to: Source : Select the area where the app was created (e.g., Home, Admin, etc.). Based on your selection, the next input will auto-fill with all apps available in the selected area. Choose the app you are creating the menu for. 4. Target Area This section specifies where the app menu should appear: Target Area : Choose where the app will be shown (e.g., Home, Admin, etc.). Menu : Select the menu to display the app in: Main Menu : The header menu in the Home area. Admin Menu : The side menu of the Admin portal. Settings : A separate side menu in the Admin portal. After selecting a menu, the next input will auto-fill with the menu items in the selected menu. Place your app under the desired menu and parent item to make it visible. 5. Index Set the sort order of this menu item relative to other items. 6. Level Define the permission level required to access this menu item. 7. Style Section Icon : Click on the icon input to open a popup with a variety of icons. Select an icon for your app. Step 4: Save the Menu Item Click Submit/Save to create the menu item. Your app is now accessible through the menu system!","title":"Menu Item"},{"location":"menu_item/#how-to-create-a-menu-for-your-app","text":"Follow these steps to make your newly created app accessible by adding a menu item in the system:","title":"How to Create a Menu for Your App"},{"location":"menu_item/#step-1-access-the-admin-panel","text":"Go to the Admin Panel from the side panel. Click on Settings . Select Menu Item from the options.","title":"Step 1: Access the Admin Panel"},{"location":"menu_item/#step-2-open-the-menu-items-list","text":"You will land on a page that displays a list of all system menu items. To add a new menu item, click on the Add button.","title":"Step 2: Open the Menu Items List"},{"location":"menu_item/#step-3-fill-out-the-form","text":"You will see a form with the following fields:","title":"Step 3: Fill Out the Form"},{"location":"menu_item/#1-menuapp-title","text":"Enter the title of the menu/app you want visible to users.","title":"1. Menu/App Title"},{"location":"menu_item/#2-alias","text":"This is the URL for the app. Follow these rules: Use lowercase letters. Replace spaces with underscores ( _ ).","title":"2. Alias"},{"location":"menu_item/#3-source-section","text":"This section determines which area the app belongs to: Source : Select the area where the app was created (e.g., Home, Admin, etc.). Based on your selection, the next input will auto-fill with all apps available in the selected area. Choose the app you are creating the menu for.","title":"3. Source Section"},{"location":"menu_item/#4-target-area","text":"This section specifies where the app menu should appear: Target Area : Choose where the app will be shown (e.g., Home, Admin, etc.). Menu : Select the menu to display the app in: Main Menu : The header menu in the Home area. Admin Menu : The side menu of the Admin portal. Settings : A separate side menu in the Admin portal. After selecting a menu, the next input will auto-fill with the menu items in the selected menu. Place your app under the desired menu and parent item to make it visible.","title":"4. Target Area"},{"location":"menu_item/#5-index","text":"Set the sort order of this menu item relative to other items.","title":"5. Index"},{"location":"menu_item/#6-level","text":"Define the permission level required to access this menu item.","title":"6. Level"},{"location":"menu_item/#7-style-section","text":"Icon : Click on the icon input to open a popup with a variety of icons. Select an icon for your app.","title":"7. Style Section"},{"location":"menu_item/#step-4-save-the-menu-item","text":"Click Submit/Save to create the menu item. Your app is now accessible through the menu system!","title":"Step 4: Save the Menu Item"},{"location":"structure/","text":"Framework Architecture This document outlines the structure of the system, highlighting its general folders and their purposes. Each folder plays a distinct role in maintaining the modularity and functionality of the framework. General Structure The system contains the following main folders: ins_apps This folder contains the system's applications. Each app encapsulates a specific functionality or feature of the system. Learn more about ins_apps and its usage. ins_wdgts This folder contains the system's widgets, reusable components designed to enhance user interface and functionality. Learn more about ins_wdgts . ins_languages This folder stores the system's general language files. Each language is organized into its own subfolder: - ar for Arabic - en for English - fr for French Learn more about managing languages. ins_kits The engine of the system resides in this folder. It contains the core library parts essential for the framework's functionality. Learn more about ins_kits and the system's core. ins_web This folder contains files specific to browser languages, such as JavaScript and CSS. To ensure proper linkage, any file in this folder must be located in a path matching the app folder name it belongs to. Learn more about ins_web . Areas Areas are self-contained subsystems within the main framework. Each area follows the same folder structure described above and operates independently while contributing to the overall system. For example: ins_admin The ins_admin area includes its own: - ins_apps - ins_wdgts - ins_languages - ins_kits - ins_web Learn more about areas like ins_admin . This framework architecture ensures a modular, scalable, and maintainable structure. Click the provided links to explore each part of the system in more detail.","title":"Architecture"},{"location":"structure/#framework-architecture","text":"This document outlines the structure of the system, highlighting its general folders and their purposes. Each folder plays a distinct role in maintaining the modularity and functionality of the framework.","title":"Framework Architecture"},{"location":"structure/#general-structure","text":"The system contains the following main folders:","title":"General Structure"},{"location":"structure/#ins_apps","text":"This folder contains the system's applications. Each app encapsulates a specific functionality or feature of the system. Learn more about ins_apps and its usage.","title":"ins_apps"},{"location":"structure/#ins_wdgts","text":"This folder contains the system's widgets, reusable components designed to enhance user interface and functionality. Learn more about ins_wdgts .","title":"ins_wdgts"},{"location":"structure/#ins_languages","text":"This folder stores the system's general language files. Each language is organized into its own subfolder: - ar for Arabic - en for English - fr for French Learn more about managing languages.","title":"ins_languages"},{"location":"structure/#ins_kits","text":"The engine of the system resides in this folder. It contains the core library parts essential for the framework's functionality. Learn more about ins_kits and the system's core.","title":"ins_kits"},{"location":"structure/#ins_web","text":"This folder contains files specific to browser languages, such as JavaScript and CSS. To ensure proper linkage, any file in this folder must be located in a path matching the app folder name it belongs to. Learn more about ins_web .","title":"ins_web"},{"location":"structure/#areas","text":"Areas are self-contained subsystems within the main framework. Each area follows the same folder structure described above and operates independently while contributing to the overall system. For example:","title":"Areas"},{"location":"structure/#ins_admin","text":"The ins_admin area includes its own: - ins_apps - ins_wdgts - ins_languages - ins_kits - ins_web Learn more about areas like ins_admin . This framework architecture ensures a modular, scalable, and maintainable structure. Click the provided links to explore each part of the system in more detail.","title":"ins_admin"},{"location":"widget/","text":"What is a Widget? a widget is a reusable UI (User Interface) component or module that performs a specific function or displays a specific part of the content on a website or application. Widgets are often used to simplify the structure of code and allow developers to reuse them in different parts of a project. Think of a widget as a small, self-contained building block for your website. For example: - Header Widget: Displays the header of your site, including a logo, navigation menu, etc. - Footer Widget: Displays the footer of your site, including copyright information and links. - Sidebar Widget: Displays additional information, such as related articles or ads. Widgets help break down a website into smaller parts, making it easier to maintain, update, and reuse code. How to Create a Widget Widgets in this system can be created in two ways: by adding static content or by creating new widgets from folders. Follow the steps below based on your needs. Scenario 1: Add Static Content to a Widget Step 1: Add Content Go to the Admin Panel . From the side panel, select Content > Content Menu Item . A list of all content will appear. Click Add to create new content. Fill in the following fields: Content Title : A title for internal use (not visible in the content body). Content : Add simple text or HTML. Click Save and note the ID shown in the URL (you will need this later). Step 2: Add Content to a Widget From the side panel, select Settings > Widgets . A list of existing widgets will appear. Click Add to create a new widget. Fill in the following fields: Widget Title : A name for internal use (visible to users). Source Section : Choose the area (e.g., Home, Admin) where the widget will be used. Content ID : After selecting the area and \"Content,\" enter the ID of the content you created. Position : Specify the widget's position on the screen (e.g., Header, Footer). Class : Optionally, add framework classes (e.g., ins-col ins-card ins-padding ins-font ). Click Save to create the widget. Scenario 2: Add a New Widget from Folders Step 1: Create the Widget Folder and File Decide the area for the widget (e.g., Home, Admin). In the selected area's folder, navigate to ins_wdgts . Create a new folder named wdg_<widget_name> (e.g., wdg_mywidget ). Inside this folder, create a Python file with the same name as the folder, using camelCase (e.g., myWidget.py ). Step 2: Add Additional Files and Properties (Optional) Properties : Create a properties.json file to define widget options. Example: json { \"options\": [{ \"_type\": \"input\", \"title\": \"Content\", \"name\": \"id\" }] } When creating the widget in the admin portal, these fields will appear under the \"Properties\" section. Use these values in code: self.widget._options[\"id\"] . JS and CSS : Navigate to the ins_web folder in the same area. Create a folder with the same name as your widget folder (e.g., wdg_mywidget ). Add files like script.js and style.css . Include them in your Python file: python self.widget._include(\"script.js\") self.widget._include(\"style.css\") Step 3: Add the Widget in the Admin Portal From the side panel, select Settings > Widgets . A list of existing widgets will appear. Click Add to create a new widget. Fill in the following fields: Widget Title : A name for internal use (visible to users). Source Section : Choose the area where the widget is located. Widget : Select the newly created widget. Properties : If properties were defined in properties.json , their fields will appear here. Position : Specify the widget's position on the screen (e.g., Header, Footer). Class : Optionally, add framework classes (e.g., ins-col ins-card ins-padding ins-font ). Click Save to add the widget. Notes Use meaningful titles for both content and widgets to make management easier. Always follow the naming conventions for folders, files, and classes to ensure the system recognizes your widget. Test the widget in its intended position to verify its appearance and functionality. By following these steps, you can easily create and manage widgets in the system!","title":"Widget"},{"location":"widget/#what-is-a-widget","text":"a widget is a reusable UI (User Interface) component or module that performs a specific function or displays a specific part of the content on a website or application. Widgets are often used to simplify the structure of code and allow developers to reuse them in different parts of a project. Think of a widget as a small, self-contained building block for your website. For example: - Header Widget: Displays the header of your site, including a logo, navigation menu, etc. - Footer Widget: Displays the footer of your site, including copyright information and links. - Sidebar Widget: Displays additional information, such as related articles or ads. Widgets help break down a website into smaller parts, making it easier to maintain, update, and reuse code.","title":"What is a Widget?"},{"location":"widget/#how-to-create-a-widget","text":"Widgets in this system can be created in two ways: by adding static content or by creating new widgets from folders. Follow the steps below based on your needs.","title":"How to Create a Widget"},{"location":"widget/#scenario-1-add-static-content-to-a-widget","text":"","title":"Scenario 1: Add Static Content to a Widget"},{"location":"widget/#step-1-add-content","text":"Go to the Admin Panel . From the side panel, select Content > Content Menu Item . A list of all content will appear. Click Add to create new content. Fill in the following fields: Content Title : A title for internal use (not visible in the content body). Content : Add simple text or HTML. Click Save and note the ID shown in the URL (you will need this later).","title":"Step 1: Add Content"},{"location":"widget/#step-2-add-content-to-a-widget","text":"From the side panel, select Settings > Widgets . A list of existing widgets will appear. Click Add to create a new widget. Fill in the following fields: Widget Title : A name for internal use (visible to users). Source Section : Choose the area (e.g., Home, Admin) where the widget will be used. Content ID : After selecting the area and \"Content,\" enter the ID of the content you created. Position : Specify the widget's position on the screen (e.g., Header, Footer). Class : Optionally, add framework classes (e.g., ins-col ins-card ins-padding ins-font ). Click Save to create the widget.","title":"Step 2: Add Content to a Widget"},{"location":"widget/#scenario-2-add-a-new-widget-from-folders","text":"","title":"Scenario 2: Add a New Widget from Folders"},{"location":"widget/#step-1-create-the-widget-folder-and-file","text":"Decide the area for the widget (e.g., Home, Admin). In the selected area's folder, navigate to ins_wdgts . Create a new folder named wdg_<widget_name> (e.g., wdg_mywidget ). Inside this folder, create a Python file with the same name as the folder, using camelCase (e.g., myWidget.py ).","title":"Step 1: Create the Widget Folder and File"},{"location":"widget/#step-2-add-additional-files-and-properties-optional","text":"Properties : Create a properties.json file to define widget options. Example: json { \"options\": [{ \"_type\": \"input\", \"title\": \"Content\", \"name\": \"id\" }] } When creating the widget in the admin portal, these fields will appear under the \"Properties\" section. Use these values in code: self.widget._options[\"id\"] . JS and CSS : Navigate to the ins_web folder in the same area. Create a folder with the same name as your widget folder (e.g., wdg_mywidget ). Add files like script.js and style.css . Include them in your Python file: python self.widget._include(\"script.js\") self.widget._include(\"style.css\")","title":"Step 2: Add Additional Files and Properties (Optional)"},{"location":"widget/#step-3-add-the-widget-in-the-admin-portal","text":"From the side panel, select Settings > Widgets . A list of existing widgets will appear. Click Add to create a new widget. Fill in the following fields: Widget Title : A name for internal use (visible to users). Source Section : Choose the area where the widget is located. Widget : Select the newly created widget. Properties : If properties were defined in properties.json , their fields will appear here. Position : Specify the widget's position on the screen (e.g., Header, Footer). Class : Optionally, add framework classes (e.g., ins-col ins-card ins-padding ins-font ). Click Save to add the widget.","title":"Step 3: Add the Widget in the Admin Portal"},{"location":"widget/#notes","text":"Use meaningful titles for both content and widgets to make management easier. Always follow the naming conventions for folders, files, and classes to ensure the system recognizes your widget. Test the widget in its intended position to verify its appearance and functionality. By following these steps, you can easily create and manage widgets in the system!","title":"Notes"}]}