{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Insya Python Framework Insya Python framework is designed to help developers build scalable, modular, and maintainable systems. It organizes your project into structured components, making it easier to manage and extend. Whether you're developing small apps or complex enterprise systems, our framework provides all the essential tools and libraries to streamline your development process. Key Features of the Framework Modular Architecture : The framework is divided into distinct modules and areas, each responsible for specific functionality, allowing you to build and manage your system with ease. Separation of Concerns : With dedicated folders for applications, widgets, languages, and core libraries, the framework promotes clean code and a clear project structure. Flexible and Scalable : Whether you're working on a small app or a large system, this framework supports flexibility and scalability to grow with your project. Easy Integration : The system is designed to integrate seamlessly with browser-based resources and other components, ensuring smooth communication between apps and services. Framework Structure The system is organized into the following primary folders: ins_apps : Contains the system's applications. ins_wdgts : Includes reusable widgets that enhance UI and functionality. ins_languages : Houses language-specific files for localization and internationalization (e.g., ar , en , fr ). ins_kits : The core engine of the system, containing essential libraries and tools. ins_web : Manages browser-related files like JS and CSS. Areas of the Framework The framework is also divided into areas , which are subsystems within the larger system. Each area follows the same modular structure and operates independently. For example: ins_admin : A dedicated area for administrative functionalities. Our framework ensures that all parts of your project are well-organized, easy to navigate, and ready for future expansion.","title":"Home"},{"location":"#welcome-to-insya-python-framework","text":"Insya Python framework is designed to help developers build scalable, modular, and maintainable systems. It organizes your project into structured components, making it easier to manage and extend. Whether you're developing small apps or complex enterprise systems, our framework provides all the essential tools and libraries to streamline your development process.","title":"Welcome to Insya Python Framework"},{"location":"#key-features-of-the-framework","text":"Modular Architecture : The framework is divided into distinct modules and areas, each responsible for specific functionality, allowing you to build and manage your system with ease. Separation of Concerns : With dedicated folders for applications, widgets, languages, and core libraries, the framework promotes clean code and a clear project structure. Flexible and Scalable : Whether you're working on a small app or a large system, this framework supports flexibility and scalability to grow with your project. Easy Integration : The system is designed to integrate seamlessly with browser-based resources and other components, ensuring smooth communication between apps and services.","title":"Key Features of the Framework"},{"location":"#framework-structure","text":"The system is organized into the following primary folders: ins_apps : Contains the system's applications. ins_wdgts : Includes reusable widgets that enhance UI and functionality. ins_languages : Houses language-specific files for localization and internationalization (e.g., ar , en , fr ). ins_kits : The core engine of the system, containing essential libraries and tools. ins_web : Manages browser-related files like JS and CSS.","title":"Framework Structure"},{"location":"#areas-of-the-framework","text":"The framework is also divided into areas , which are subsystems within the larger system. Each area follows the same modular structure and operates independently. For example: ins_admin : A dedicated area for administrative functionalities. Our framework ensures that all parts of your project are well-organized, easy to navigate, and ready for future expansion.","title":"Areas of the Framework"},{"location":"app/","text":"Creating an App in the System An App is a part of the system that can be used and called from any area. Below are the steps to create an app in the system. Steps to Create an App 1. Create the App Folder First, create a folder inside the ins_apps directory. The folder name should represent your app and be written with prefex app . Ex : app_test 2. Create the Python File Inside the app folder, create a Python file with the same name as the folder, followed by the .py extension. This file is the minimum requirement to create an app, and it will be enough for the app to work. The class name in the Python file should be the same as the folder and file name, written in CamelCase (without underscores) in previpus example if app name is app_test the class name should be AppTest . This Python file will initialize the app and make it functional. 3. Additional Files (Optional) You can enhance your app by adding more files: Additional Python Files : If needed, you can create more Python files for additional functionality. Properties File : A JSON file called properties.json can be created an you can know more about json properties file from here . JavaScript and CSS Files : If your app needs JavaScript or CSS, you will need to create a new folder inside the ins_web directory with the same name as your app. Inside this folder, you can create: script.js for JavaScript code. style.css for custom styles. 4. Make Your App Viewable in the Portal To make your app accessible and viewable in the portal, you need to follow the instructions provided in this link . This simple structure is all you need to create an app in the system. You can always add more files as required for additional functionality.","title":"App"},{"location":"app/#creating-an-app-in-the-system","text":"An App is a part of the system that can be used and called from any area. Below are the steps to create an app in the system.","title":"Creating an App in the System"},{"location":"app/#steps-to-create-an-app","text":"","title":"Steps to Create an App"},{"location":"app/#1-create-the-app-folder","text":"First, create a folder inside the ins_apps directory. The folder name should represent your app and be written with prefex app . Ex : app_test","title":"1. Create the App Folder"},{"location":"app/#2-create-the-python-file","text":"Inside the app folder, create a Python file with the same name as the folder, followed by the .py extension. This file is the minimum requirement to create an app, and it will be enough for the app to work. The class name in the Python file should be the same as the folder and file name, written in CamelCase (without underscores) in previpus example if app name is app_test the class name should be AppTest . This Python file will initialize the app and make it functional.","title":"2. Create the Python File"},{"location":"app/#3-additional-files-optional","text":"You can enhance your app by adding more files: Additional Python Files : If needed, you can create more Python files for additional functionality. Properties File : A JSON file called properties.json can be created an you can know more about json properties file from here . JavaScript and CSS Files : If your app needs JavaScript or CSS, you will need to create a new folder inside the ins_web directory with the same name as your app. Inside this folder, you can create: script.js for JavaScript code. style.css for custom styles.","title":"3. Additional Files (Optional)"},{"location":"app/#4-make-your-app-viewable-in-the-portal","text":"To make your app accessible and viewable in the portal, you need to follow the instructions provided in this link . This simple structure is all you need to create an app in the system. You can always add more files as required for additional functionality.","title":"4. Make Your App Viewable in the Portal"},{"location":"structure/","text":"Framework Architecture This document outlines the structure of the system, highlighting its general folders and their purposes. Each folder plays a distinct role in maintaining the modularity and functionality of the framework. General Structure The system contains the following main folders: ins_apps This folder contains the system's applications. Each app encapsulates a specific functionality or feature of the system. Learn more about ins_apps and its usage. ins_wdgts This folder contains the system's widgets, reusable components designed to enhance user interface and functionality. Learn more about ins_wdgts . ins_languages This folder stores the system's general language files. Each language is organized into its own subfolder: - ar for Arabic - en for English - fr for French Learn more about managing languages. ins_kits The engine of the system resides in this folder. It contains the core library parts essential for the framework's functionality. Learn more about ins_kits and the system's core. ins_web This folder contains files specific to browser languages, such as JavaScript and CSS. To ensure proper linkage, any file in this folder must be located in a path matching the app folder name it belongs to. Learn more about ins_web . Areas Areas are self-contained subsystems within the main framework. Each area follows the same folder structure described above and operates independently while contributing to the overall system. For example: ins_admin The ins_admin area includes its own: - ins_apps - ins_wdgts - ins_languages - ins_kits - ins_web Learn more about areas like ins_admin . This framework architecture ensures a modular, scalable, and maintainable structure. Click the provided links to explore each part of the system in more detail.","title":"Architecture"},{"location":"structure/#framework-architecture","text":"This document outlines the structure of the system, highlighting its general folders and their purposes. Each folder plays a distinct role in maintaining the modularity and functionality of the framework.","title":"Framework Architecture"},{"location":"structure/#general-structure","text":"The system contains the following main folders:","title":"General Structure"},{"location":"structure/#ins_apps","text":"This folder contains the system's applications. Each app encapsulates a specific functionality or feature of the system. Learn more about ins_apps and its usage.","title":"ins_apps"},{"location":"structure/#ins_wdgts","text":"This folder contains the system's widgets, reusable components designed to enhance user interface and functionality. Learn more about ins_wdgts .","title":"ins_wdgts"},{"location":"structure/#ins_languages","text":"This folder stores the system's general language files. Each language is organized into its own subfolder: - ar for Arabic - en for English - fr for French Learn more about managing languages.","title":"ins_languages"},{"location":"structure/#ins_kits","text":"The engine of the system resides in this folder. It contains the core library parts essential for the framework's functionality. Learn more about ins_kits and the system's core.","title":"ins_kits"},{"location":"structure/#ins_web","text":"This folder contains files specific to browser languages, such as JavaScript and CSS. To ensure proper linkage, any file in this folder must be located in a path matching the app folder name it belongs to. Learn more about ins_web .","title":"ins_web"},{"location":"structure/#areas","text":"Areas are self-contained subsystems within the main framework. Each area follows the same folder structure described above and operates independently while contributing to the overall system. For example:","title":"Areas"},{"location":"structure/#ins_admin","text":"The ins_admin area includes its own: - ins_apps - ins_wdgts - ins_languages - ins_kits - ins_web Learn more about areas like ins_admin . This framework architecture ensures a modular, scalable, and maintainable structure. Click the provided links to explore each part of the system in more detail.","title":"ins_admin"}]}