{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Insya Python Framework Insya Python framework is designed to help developers build scalable, modular, and maintainable systems. It organizes your project into structured components, making it easier to manage and extend. Whether you're developing small apps or complex enterprise systems, our framework provides all the essential tools and libraries to streamline your development process. Key Features of the Framework Modular Architecture : The framework is divided into distinct modules and areas, each responsible for specific functionality, allowing you to build and manage your system with ease. Separation of Concerns : With dedicated folders for applications, widgets, languages, and core libraries, the framework promotes clean code and a clear project structure. Flexible and Scalable : Whether you're working on a small app or a large system, this framework supports flexibility and scalability to grow with your project. Easy Integration : The system is designed to integrate seamlessly with browser-based resources and other components, ensuring smooth communication between apps and services. Framework Structure The system is organized into the following primary folders: ins_apps : Contains the system's applications. ins_wdgts : Includes reusable widgets that enhance UI and functionality. ins_languages : Houses language-specific files for localization and internationalization (e.g., ar , en , fr ). ins_kits : The core engine of the system, containing essential libraries and tools. ins_web : Manages browser-related files like JS and CSS. Areas of the Framework The framework is also divided into areas , which are subsystems within the larger system. Each area follows the same modular structure and operates independently. For example: ins_admin : A dedicated area for administrative functionalities. Our framework ensures that all parts of your project are well-organized, easy to navigate, and ready for future expansion.","title":"Home"},{"location":"#welcome-to-insya-python-framework","text":"Insya Python framework is designed to help developers build scalable, modular, and maintainable systems. It organizes your project into structured components, making it easier to manage and extend. Whether you're developing small apps or complex enterprise systems, our framework provides all the essential tools and libraries to streamline your development process.","title":"Welcome to Insya Python Framework"},{"location":"#key-features-of-the-framework","text":"Modular Architecture : The framework is divided into distinct modules and areas, each responsible for specific functionality, allowing you to build and manage your system with ease. Separation of Concerns : With dedicated folders for applications, widgets, languages, and core libraries, the framework promotes clean code and a clear project structure. Flexible and Scalable : Whether you're working on a small app or a large system, this framework supports flexibility and scalability to grow with your project. Easy Integration : The system is designed to integrate seamlessly with browser-based resources and other components, ensuring smooth communication between apps and services.","title":"Key Features of the Framework"},{"location":"#framework-structure","text":"The system is organized into the following primary folders: ins_apps : Contains the system's applications. ins_wdgts : Includes reusable widgets that enhance UI and functionality. ins_languages : Houses language-specific files for localization and internationalization (e.g., ar , en , fr ). ins_kits : The core engine of the system, containing essential libraries and tools. ins_web : Manages browser-related files like JS and CSS.","title":"Framework Structure"},{"location":"#areas-of-the-framework","text":"The framework is also divided into areas , which are subsystems within the larger system. Each area follows the same modular structure and operates independently. For example: ins_admin : A dedicated area for administrative functionalities. Our framework ensures that all parts of your project are well-organized, easy to navigate, and ready for future expansion.","title":"Areas of the Framework"},{"location":"app/","text":"Creating an App in the System An App is a part of the system that can be used and called from any area. Below are the steps to create an app in the system. Steps to Create an App 1. Create the App Folder First, create a folder inside the ins_apps directory. The folder name should represent your app and be written with prefex app . Ex : app_test 2. Create the Python File Inside the app folder, create a Python file with the same name as the folder, followed by the .py extension. This file is the minimum requirement to create an app, and it will be enough for the app to work. The class name in the Python file should be the same as the folder and file name, written in CamelCase (without underscores) in previpus example if app name is app_test the class name should be AppTest . This Python file will initialize the app and make it functional. 3. Additional Files (Optional) You can enhance your app by adding more files: Additional Python Files : If needed, you can create more Python files for additional functionality. Properties File : A JSON file called properties.json can be created an you can know more about json properties file from here . JavaScript and CSS Files : If your app needs JavaScript or CSS, you will need to create a new folder inside the ins_web directory with the same name as your app. Inside this folder, you can create: script.js for JavaScript code. style.css for custom styles. 4. Make Your App Viewable in the Portal To make your app accessible and viewable in the portal, you need to follow the instructions provided in this link . This simple structure is all you need to create an app in the system. You can always add more files as required for additional functionality.","title":"App"},{"location":"app/#creating-an-app-in-the-system","text":"An App is a part of the system that can be used and called from any area. Below are the steps to create an app in the system.","title":"Creating an App in the System"},{"location":"app/#steps-to-create-an-app","text":"","title":"Steps to Create an App"},{"location":"app/#1-create-the-app-folder","text":"First, create a folder inside the ins_apps directory. The folder name should represent your app and be written with prefex app . Ex : app_test","title":"1. Create the App Folder"},{"location":"app/#2-create-the-python-file","text":"Inside the app folder, create a Python file with the same name as the folder, followed by the .py extension. This file is the minimum requirement to create an app, and it will be enough for the app to work. The class name in the Python file should be the same as the folder and file name, written in CamelCase (without underscores) in previpus example if app name is app_test the class name should be AppTest . This Python file will initialize the app and make it functional.","title":"2. Create the Python File"},{"location":"app/#3-additional-files-optional","text":"You can enhance your app by adding more files: Additional Python Files : If needed, you can create more Python files for additional functionality. Properties File : A JSON file called properties.json can be created an you can know more about json properties file from here . JavaScript and CSS Files : If your app needs JavaScript or CSS, you will need to create a new folder inside the ins_web directory with the same name as your app. Inside this folder, you can create: script.js for JavaScript code. style.css for custom styles.","title":"3. Additional Files (Optional)"},{"location":"app/#4-make-your-app-viewable-in-the-portal","text":"To make your app accessible and viewable in the portal, you need to follow the instructions provided in this link . This simple structure is all you need to create an app in the system. You can always add more files as required for additional functionality.","title":"4. Make Your App Viewable in the Portal"},{"location":"crud/","text":"CRUD System Documentation What is a CRUD System? A CRUD system provides the foundational functionalities of Create , Read , Update , and Delete for managing data in an application. It simplifies the interaction with the database by automatically generating user interfaces and operations for these functionalities. In this framework, enabling a CRUD system for your application allows you to: - Display a list of records. - Add new records. - Edit existing records. - Delete or trash records. - Filter records based on specific criteria. Activating the CRUD System To activate the CRUD system for your app, add the following code in the out method of your Python file: return self.ins._apps._crud(properties=self.app._properties) This code links the app to the properties.json file, which defines the fields, list options, and filters for your CRUD UI. Once activated, your app will include: - A list of items. - Add, Edit, and Delete buttons. - Filter options. Configuring CRUD Options in properties.json You can control the fields displayed in the list, form, and filters using the properties.json file. 1. Define the Table Specify the table the CRUD system will interact with using the table key: \"table\": \"kit_menu\" This table will be used for fetching, adding, and updating data. 2. List Options ( list_data ) Define the fields to display in the list view under the list_data key: \"list_data\": [ { \"name\": \"title\", \"title\": \"My Title\", \"view\": \"text\", \"class\": \"ins-col-grow\" }, { \"name\": \"kit_disabled\", \"title\": \"Disabled\", \"view\": \"text\", \"class\": \"ins-col-2\" } ] name : Field name in the database. title : Display title. view : Field type for display (e.g., text). class : CSS classes for styling. 3. Form Options ( form_data ) Define the fields to include in the form view under the form_data key: \"form_data\": [ { \"name\": \"title\", \"title\": \"Title *\", \"_type\": \"input\", \"type\": \"text\", \"required\": \"true\", \"pclass\": \"ins-col-6\" }, { \"name\": \"kit_disabled\", \"_type\": \"input\", \"type\": \"bool\", \"value\": \"1\", \"pclass\": \"ins-col-3\" } ] _type : Input type (e.g., input, select). type : HTML input type (e.g., text, bool). required : Marks the field as mandatory. pclass : CSS classes for layout. 4. Filter Options ( list_filter ) Define the fields for filtering records under the list_filter key: \"list_filter\": [ { \"name\": \"title\", \"title\": \"Menu Title *\", \"_type\": \"input\", \"_info\": \"Search in <b>Title</b> by <b>@(value)</b>\", \"type\": \"text\", \"main\": true, \"required\": \"true\", \"pclass\": \"ins-col-12\" } ] _info : Custom search information text. main : Marks the field as a primary filter. Configuring CRUD Options Dynamically Instead of using properties.json , you can define CRUD options dynamically in your Python code using the CRUD library. Import CRUD operations: python ops = self.ins._apps._crud_ops Set CRUD options: List fields : python ops._list_data = [ { \"name\": \"title\", \"title\": \"My Title\", \"view\": \"text\", \"class\": \"ins-col-9\" }, { \"name\": \"content\", \"title\": \"Content\", \"_view\": \"limit\", \"limit_ops\": \"25\", \"class\": \"ins-col-2\" } ] Form fields : python ops._form_data = [ { \"name\": \"title\", \"title\": \"Title\", \"_type\": \"input\", \"type\": \"text\", \"required\": \"true\", \"pclass\": \"ins-col-6\" } ] Filter fields : python ops._list_filter = [ { \"name\": \"title\", \"title\": \"Filter Title\", \"_type\": \"input\", \"type\": \"text\", \"main\": true } ] Database table : python ops._table = \"kit_menu\" Return the CRUD system: python return self.ins._apps._crud(ops) Notes Use meaningful field names and titles for clarity. Test all CRUD functionalities to ensure the desired behavior. Combine JSON configuration and dynamic code as needed for flexibility. One major advantage of using a JSON file to configure CRUD options is the ability to make changes without redeploying the entire project. This saves time and effort, especially in large or live applications, because: Immediate Updates : Changes to the JSON file take effect as soon as the file is saved. There is no downtime for redeployment. Ease of Maintenance : JSON files are straightforward and human-readable, making them ideal for quick edits or adding new configurations. Flexibility : Multiple team members can modify different parts of the configuration without affecting the core application code.","title":"CRUD"},{"location":"crud/#crud-system-documentation","text":"","title":"CRUD System Documentation"},{"location":"crud/#what-is-a-crud-system","text":"A CRUD system provides the foundational functionalities of Create , Read , Update , and Delete for managing data in an application. It simplifies the interaction with the database by automatically generating user interfaces and operations for these functionalities. In this framework, enabling a CRUD system for your application allows you to: - Display a list of records. - Add new records. - Edit existing records. - Delete or trash records. - Filter records based on specific criteria.","title":"What is a CRUD System?"},{"location":"crud/#activating-the-crud-system","text":"To activate the CRUD system for your app, add the following code in the out method of your Python file: return self.ins._apps._crud(properties=self.app._properties) This code links the app to the properties.json file, which defines the fields, list options, and filters for your CRUD UI. Once activated, your app will include: - A list of items. - Add, Edit, and Delete buttons. - Filter options.","title":"Activating the CRUD System"},{"location":"crud/#configuring-crud-options-in-propertiesjson","text":"You can control the fields displayed in the list, form, and filters using the properties.json file.","title":"Configuring CRUD Options in properties.json"},{"location":"crud/#1-define-the-table","text":"Specify the table the CRUD system will interact with using the table key: \"table\": \"kit_menu\" This table will be used for fetching, adding, and updating data.","title":"1. Define the Table"},{"location":"crud/#2-list-options-list_data","text":"Define the fields to display in the list view under the list_data key: \"list_data\": [ { \"name\": \"title\", \"title\": \"My Title\", \"view\": \"text\", \"class\": \"ins-col-grow\" }, { \"name\": \"kit_disabled\", \"title\": \"Disabled\", \"view\": \"text\", \"class\": \"ins-col-2\" } ] name : Field name in the database. title : Display title. view : Field type for display (e.g., text). class : CSS classes for styling.","title":"2. List Options (list_data)"},{"location":"crud/#3-form-options-form_data","text":"Define the fields to include in the form view under the form_data key: \"form_data\": [ { \"name\": \"title\", \"title\": \"Title *\", \"_type\": \"input\", \"type\": \"text\", \"required\": \"true\", \"pclass\": \"ins-col-6\" }, { \"name\": \"kit_disabled\", \"_type\": \"input\", \"type\": \"bool\", \"value\": \"1\", \"pclass\": \"ins-col-3\" } ] _type : Input type (e.g., input, select). type : HTML input type (e.g., text, bool). required : Marks the field as mandatory. pclass : CSS classes for layout.","title":"3. Form Options (form_data)"},{"location":"crud/#4-filter-options-list_filter","text":"Define the fields for filtering records under the list_filter key: \"list_filter\": [ { \"name\": \"title\", \"title\": \"Menu Title *\", \"_type\": \"input\", \"_info\": \"Search in <b>Title</b> by <b>@(value)</b>\", \"type\": \"text\", \"main\": true, \"required\": \"true\", \"pclass\": \"ins-col-12\" } ] _info : Custom search information text. main : Marks the field as a primary filter.","title":"4. Filter Options (list_filter)"},{"location":"crud/#configuring-crud-options-dynamically","text":"Instead of using properties.json , you can define CRUD options dynamically in your Python code using the CRUD library. Import CRUD operations: python ops = self.ins._apps._crud_ops Set CRUD options: List fields : python ops._list_data = [ { \"name\": \"title\", \"title\": \"My Title\", \"view\": \"text\", \"class\": \"ins-col-9\" }, { \"name\": \"content\", \"title\": \"Content\", \"_view\": \"limit\", \"limit_ops\": \"25\", \"class\": \"ins-col-2\" } ] Form fields : python ops._form_data = [ { \"name\": \"title\", \"title\": \"Title\", \"_type\": \"input\", \"type\": \"text\", \"required\": \"true\", \"pclass\": \"ins-col-6\" } ] Filter fields : python ops._list_filter = [ { \"name\": \"title\", \"title\": \"Filter Title\", \"_type\": \"input\", \"type\": \"text\", \"main\": true } ] Database table : python ops._table = \"kit_menu\" Return the CRUD system: python return self.ins._apps._crud(ops)","title":"Configuring CRUD Options Dynamically"},{"location":"crud/#notes","text":"Use meaningful field names and titles for clarity. Test all CRUD functionalities to ensure the desired behavior. Combine JSON configuration and dynamic code as needed for flexibility. One major advantage of using a JSON file to configure CRUD options is the ability to make changes without redeploying the entire project. This saves time and effort, especially in large or live applications, because: Immediate Updates : Changes to the JSON file take effect as soon as the file is saved. There is no downtime for redeployment. Ease of Maintenance : JSON files are straightforward and human-readable, making them ideal for quick edits or adding new configurations. Flexibility : Multiple team members can modify different parts of the configuration without affecting the core application code.","title":"Notes"},{"location":"menu_item/","text":"How to Create a Menu for Your App Follow these steps to make your newly created app accessible by adding a menu item in the system: Step 1: Access the Admin Panel Go to the Admin Panel from the side panel. Click on Settings . Select Menu Item from the options. Step 2: Open the Menu Items List You will land on a page that displays a list of all system menu items. To add a new menu item, click on the Add button. Step 3: Fill Out the Form You will see a form with the following fields: 1. Menu/App Title Enter the title of the menu/app you want visible to users. 2. Alias This is the URL for the app. Follow these rules: Use lowercase letters. Replace spaces with underscores ( _ ). 3. Source Section This section determines which area the app belongs to: Source : Select the area where the app was created (e.g., Home, Admin, etc.). Based on your selection, the next input will auto-fill with all apps available in the selected area. Choose the app you are creating the menu for. 4. Target Area This section specifies where the app menu should appear: Target Area : Choose where the app will be shown (e.g., Home, Admin, etc.). Menu : Select the menu to display the app in: Main Menu : The header menu in the Home area. Admin Menu : The side menu of the Admin portal. Settings : A separate side menu in the Admin portal. After selecting a menu, the next input will auto-fill with the menu items in the selected menu. Place your app under the desired menu and parent item to make it visible. 5. Index Set the sort order of this menu item relative to other items. 6. Level Define the permission level required to access this menu item. 7. Style Section Icon : Click on the icon input to open a popup with a variety of icons. Select an icon for your app. Step 4: Save the Menu Item Click Submit/Save to create the menu item. Your app is now accessible through the menu system!","title":"Menu Item"},{"location":"menu_item/#how-to-create-a-menu-for-your-app","text":"Follow these steps to make your newly created app accessible by adding a menu item in the system:","title":"How to Create a Menu for Your App"},{"location":"menu_item/#step-1-access-the-admin-panel","text":"Go to the Admin Panel from the side panel. Click on Settings . Select Menu Item from the options.","title":"Step 1: Access the Admin Panel"},{"location":"menu_item/#step-2-open-the-menu-items-list","text":"You will land on a page that displays a list of all system menu items. To add a new menu item, click on the Add button.","title":"Step 2: Open the Menu Items List"},{"location":"menu_item/#step-3-fill-out-the-form","text":"You will see a form with the following fields:","title":"Step 3: Fill Out the Form"},{"location":"menu_item/#1-menuapp-title","text":"Enter the title of the menu/app you want visible to users.","title":"1. Menu/App Title"},{"location":"menu_item/#2-alias","text":"This is the URL for the app. Follow these rules: Use lowercase letters. Replace spaces with underscores ( _ ).","title":"2. Alias"},{"location":"menu_item/#3-source-section","text":"This section determines which area the app belongs to: Source : Select the area where the app was created (e.g., Home, Admin, etc.). Based on your selection, the next input will auto-fill with all apps available in the selected area. Choose the app you are creating the menu for.","title":"3. Source Section"},{"location":"menu_item/#4-target-area","text":"This section specifies where the app menu should appear: Target Area : Choose where the app will be shown (e.g., Home, Admin, etc.). Menu : Select the menu to display the app in: Main Menu : The header menu in the Home area. Admin Menu : The side menu of the Admin portal. Settings : A separate side menu in the Admin portal. After selecting a menu, the next input will auto-fill with the menu items in the selected menu. Place your app under the desired menu and parent item to make it visible.","title":"4. Target Area"},{"location":"menu_item/#5-index","text":"Set the sort order of this menu item relative to other items.","title":"5. Index"},{"location":"menu_item/#6-level","text":"Define the permission level required to access this menu item.","title":"6. Level"},{"location":"menu_item/#7-style-section","text":"Icon : Click on the icon input to open a popup with a variety of icons. Select an icon for your app.","title":"7. Style Section"},{"location":"menu_item/#step-4-save-the-menu-item","text":"Click Submit/Save to create the menu item. Your app is now accessible through the menu system!","title":"Step 4: Save the Menu Item"},{"location":"structure/","text":"Framework Architecture This document outlines the structure of the system, highlighting its general folders and their purposes. Each folder plays a distinct role in maintaining the modularity and functionality of the framework. General Structure The system contains the following main folders: ins_apps This folder contains the system's applications. Each app encapsulates a specific functionality or feature of the system. Learn more about ins_apps and its usage. ins_wdgts This folder contains the system's widgets, reusable components designed to enhance user interface and functionality. Learn more about ins_wdgts . ins_languages This folder stores the system's general language files. Each language is organized into its own subfolder: - ar for Arabic - en for English - fr for French Learn more about managing languages. ins_kits The engine of the system resides in this folder. It contains the core library parts essential for the framework's functionality. Learn more about ins_kits and the system's core. ins_web This folder contains files specific to browser languages, such as JavaScript and CSS. To ensure proper linkage, any file in this folder must be located in a path matching the app folder name it belongs to. Learn more about ins_web . Areas Areas are self-contained subsystems within the main framework. Each area follows the same folder structure described above and operates independently while contributing to the overall system. For example: ins_admin The ins_admin area includes its own: - ins_apps - ins_wdgts - ins_languages - ins_kits - ins_web Learn more about areas like ins_admin . This framework architecture ensures a modular, scalable, and maintainable structure. Click the provided links to explore each part of the system in more detail.","title":"Architecture"},{"location":"structure/#framework-architecture","text":"This document outlines the structure of the system, highlighting its general folders and their purposes. Each folder plays a distinct role in maintaining the modularity and functionality of the framework.","title":"Framework Architecture"},{"location":"structure/#general-structure","text":"The system contains the following main folders:","title":"General Structure"},{"location":"structure/#ins_apps","text":"This folder contains the system's applications. Each app encapsulates a specific functionality or feature of the system. Learn more about ins_apps and its usage.","title":"ins_apps"},{"location":"structure/#ins_wdgts","text":"This folder contains the system's widgets, reusable components designed to enhance user interface and functionality. Learn more about ins_wdgts .","title":"ins_wdgts"},{"location":"structure/#ins_languages","text":"This folder stores the system's general language files. Each language is organized into its own subfolder: - ar for Arabic - en for English - fr for French Learn more about managing languages.","title":"ins_languages"},{"location":"structure/#ins_kits","text":"The engine of the system resides in this folder. It contains the core library parts essential for the framework's functionality. Learn more about ins_kits and the system's core.","title":"ins_kits"},{"location":"structure/#ins_web","text":"This folder contains files specific to browser languages, such as JavaScript and CSS. To ensure proper linkage, any file in this folder must be located in a path matching the app folder name it belongs to. Learn more about ins_web .","title":"ins_web"},{"location":"structure/#areas","text":"Areas are self-contained subsystems within the main framework. Each area follows the same folder structure described above and operates independently while contributing to the overall system. For example:","title":"Areas"},{"location":"structure/#ins_admin","text":"The ins_admin area includes its own: - ins_apps - ins_wdgts - ins_languages - ins_kits - ins_web Learn more about areas like ins_admin . This framework architecture ensures a modular, scalable, and maintainable structure. Click the provided links to explore each part of the system in more detail.","title":"ins_admin"},{"location":"widget/","text":"What is a Widget? a widget is a reusable UI (User Interface) component or module that performs a specific function or displays a specific part of the content on a website or application. Widgets are often used to simplify the structure of code and allow developers to reuse them in different parts of a project. Think of a widget as a small, self-contained building block for your website. For example: - Header Widget: Displays the header of your site, including a logo, navigation menu, etc. - Footer Widget: Displays the footer of your site, including copyright information and links. - Sidebar Widget: Displays additional information, such as related articles or ads. Widgets help break down a website into smaller parts, making it easier to maintain, update, and reuse code. How to Create a Widget Widgets in this system can be created in two ways: by adding static content or by creating new widgets from folders. Follow the steps below based on your needs. Scenario 1: Add Static Content to a Widget Step 1: Add Content Go to the Admin Panel . From the side panel, select Content > Content Menu Item . A list of all content will appear. Click Add to create new content. Fill in the following fields: Content Title : A title for internal use (not visible in the content body). Content : Add simple text or HTML. Click Save and note the ID shown in the URL (you will need this later). Step 2: Add Content to a Widget From the side panel, select Settings > Widgets . A list of existing widgets will appear. Click Add to create a new widget. Fill in the following fields: Widget Title : A name for internal use (visible to users). Source Section : Choose the area (e.g., Home, Admin) where the widget will be used. Content ID : After selecting the area and \"Content,\" enter the ID of the content you created. Position : Specify the widget's position on the screen (e.g., Header, Footer). Class : Optionally, add framework classes (e.g., ins-col ins-card ins-padding ins-font ). Click Save to create the widget. Scenario 2: Add a New Widget from Folders Step 1: Create the Widget Folder and File Decide the area for the widget (e.g., Home, Admin). In the selected area's folder, navigate to ins_wdgts . Create a new folder named wdg_<widget_name> (e.g., wdg_mywidget ). Inside this folder, create a Python file with the same name as the folder, using camelCase (e.g., myWidget.py ). Step 2: Add Additional Files and Properties (Optional) Properties : Create a properties.json file to define widget options. Example: json { \"options\": [{ \"_type\": \"input\", \"title\": \"Content\", \"name\": \"id\" }] } When creating the widget in the admin portal, these fields will appear under the \"Properties\" section. Use these values in code: self.widget._options[\"id\"] . JS and CSS : Navigate to the ins_web folder in the same area. Create a folder with the same name as your widget folder (e.g., wdg_mywidget ). Add files like script.js and style.css . Include them in your Python file: python self.widget._include(\"script.js\") self.widget._include(\"style.css\") Step 3: Add the Widget in the Admin Portal From the side panel, select Settings > Widgets . A list of existing widgets will appear. Click Add to create a new widget. Fill in the following fields: Widget Title : A name for internal use (visible to users). Source Section : Choose the area where the widget is located. Widget : Select the newly created widget. Properties : If properties were defined in properties.json , their fields will appear here. Position : Specify the widget's position on the screen (e.g., Header, Footer). Class : Optionally, add framework classes (e.g., ins-col ins-card ins-padding ins-font ). Click Save to add the widget. Notes Use meaningful titles for both content and widgets to make management easier. Always follow the naming conventions for folders, files, and classes to ensure the system recognizes your widget. Test the widget in its intended position to verify its appearance and functionality. By following these steps, you can easily create and manage widgets in the system!","title":"Widget"},{"location":"widget/#what-is-a-widget","text":"a widget is a reusable UI (User Interface) component or module that performs a specific function or displays a specific part of the content on a website or application. Widgets are often used to simplify the structure of code and allow developers to reuse them in different parts of a project. Think of a widget as a small, self-contained building block for your website. For example: - Header Widget: Displays the header of your site, including a logo, navigation menu, etc. - Footer Widget: Displays the footer of your site, including copyright information and links. - Sidebar Widget: Displays additional information, such as related articles or ads. Widgets help break down a website into smaller parts, making it easier to maintain, update, and reuse code.","title":"What is a Widget?"},{"location":"widget/#how-to-create-a-widget","text":"Widgets in this system can be created in two ways: by adding static content or by creating new widgets from folders. Follow the steps below based on your needs.","title":"How to Create a Widget"},{"location":"widget/#scenario-1-add-static-content-to-a-widget","text":"","title":"Scenario 1: Add Static Content to a Widget"},{"location":"widget/#step-1-add-content","text":"Go to the Admin Panel . From the side panel, select Content > Content Menu Item . A list of all content will appear. Click Add to create new content. Fill in the following fields: Content Title : A title for internal use (not visible in the content body). Content : Add simple text or HTML. Click Save and note the ID shown in the URL (you will need this later).","title":"Step 1: Add Content"},{"location":"widget/#step-2-add-content-to-a-widget","text":"From the side panel, select Settings > Widgets . A list of existing widgets will appear. Click Add to create a new widget. Fill in the following fields: Widget Title : A name for internal use (visible to users). Source Section : Choose the area (e.g., Home, Admin) where the widget will be used. Content ID : After selecting the area and \"Content,\" enter the ID of the content you created. Position : Specify the widget's position on the screen (e.g., Header, Footer). Class : Optionally, add framework classes (e.g., ins-col ins-card ins-padding ins-font ). Click Save to create the widget.","title":"Step 2: Add Content to a Widget"},{"location":"widget/#scenario-2-add-a-new-widget-from-folders","text":"","title":"Scenario 2: Add a New Widget from Folders"},{"location":"widget/#step-1-create-the-widget-folder-and-file","text":"Decide the area for the widget (e.g., Home, Admin). In the selected area's folder, navigate to ins_wdgts . Create a new folder named wdg_<widget_name> (e.g., wdg_mywidget ). Inside this folder, create a Python file with the same name as the folder, using camelCase (e.g., myWidget.py ).","title":"Step 1: Create the Widget Folder and File"},{"location":"widget/#step-2-add-additional-files-and-properties-optional","text":"Properties : Create a properties.json file to define widget options. Example: json { \"options\": [{ \"_type\": \"input\", \"title\": \"Content\", \"name\": \"id\" }] } When creating the widget in the admin portal, these fields will appear under the \"Properties\" section. Use these values in code: self.widget._options[\"id\"] . JS and CSS : Navigate to the ins_web folder in the same area. Create a folder with the same name as your widget folder (e.g., wdg_mywidget ). Add files like script.js and style.css . Include them in your Python file: python self.widget._include(\"script.js\") self.widget._include(\"style.css\")","title":"Step 2: Add Additional Files and Properties (Optional)"},{"location":"widget/#step-3-add-the-widget-in-the-admin-portal","text":"From the side panel, select Settings > Widgets . A list of existing widgets will appear. Click Add to create a new widget. Fill in the following fields: Widget Title : A name for internal use (visible to users). Source Section : Choose the area where the widget is located. Widget : Select the newly created widget. Properties : If properties were defined in properties.json , their fields will appear here. Position : Specify the widget's position on the screen (e.g., Header, Footer). Class : Optionally, add framework classes (e.g., ins-col ins-card ins-padding ins-font ). Click Save to add the widget.","title":"Step 3: Add the Widget in the Admin Portal"},{"location":"widget/#notes","text":"Use meaningful titles for both content and widgets to make management easier. Always follow the naming conventions for folders, files, and classes to ensure the system recognizes your widget. Test the widget in its intended position to verify its appearance and functionality. By following these steps, you can easily create and manage widgets in the system!","title":"Notes"}]}